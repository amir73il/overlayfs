#!/bin/sh
# mount.snapshot <dev> <mnt>
#
# Overlayfs snapshot mount helper
#
# - Check if snapshots stack exists at <mnt>/@/.snapshots
# - Bind shared mount at <mnt>/@
# - Mount snapshot mount at <mnt>
# - Mount olds snapshots at <mnt>/@/<id>/m
#
# * If any mount flags other than -o rw are passed to helper,
#   it passes the command as is without doing the above
#
#-----------------------------------------------------------------------
#
# Copyright (C) 2016 CTERA Networks. All Rights Reserved.
# Author: Amir Goldstein <amir73il@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

dev="$1"
shift
mnt="${1%/}"
shift

[ -d "$mnt" ] || exit 1

error()
{
	echo "$1" >&2
	exit 1
}

# No support for mount options at the moment
if [ -n "$1" -a "$1" != "-o" ]; then
       error "invalid snapshot mount options '$*'"
fi

shift
mntopts="$1"
if [ -n "$mntopts" -a "$mntopts" != "rw" -a "$mntopts" != "rw,remount" ]; then
	echo "$*" > /tmp/mount.snapshot.in
	exec mount -i -t snapshot "$dev" "$mnt" -o "$mntopts"
fi

# Verify that overlayfs snapshot feature is enabled
grep -wq 'overlay' /proc/filesystems || modprobe overlay
grep -wq 'snapshot' /proc/filesystems || \
	error "overlayfs snapshots feature not enabled."

# Verify snapshot is not already mounted on child or parent path
# because nesting is not allowed
mounted=$(mount -t snapshot | while read d on m opt; do echo $m; done)
for m in $mounted; do
	if [ "$m" = "$mnt" ]; then
		( echo "$mntopts" | grep -q remount ) || \
			error "overlayfs snapshot already mounted at '$m'."
	elif ( echo $m | grep -q "^$mnt" ) || ( echo $mnt | grep -q "^$m" ); then
		error "overlapping overlayfs snapshot already mounted at '$m'."
	fi
done

lower="$mnt"
snapdir="$mnt/@"
snapshots="$snapdir/.snapshots"

# Disable redirect_dir because of rename issue with multiple snapshots:
# https://github.com/amir73il/overlayfs/issues/1
mntopts="$mntopts,redirect_dir=off"
snapmntopts="redirect_dir=off"
oldsnapmntopts="redirect_dir=off"

[ ! -s "$snapshots" ] || id=$(tail -n 1 "$snapshots")

if [ -z "$id" ]; then
	# No current snapshot - mount pass through snapshot mount
	exec mount -i -t snapshot "$dev" "$mnt" -o"upperdir=$lower,$mntopts"
fi

cd "$lower" || exit 1

# Relative to $lower to keep overlay mount options shorter
current="@/$id"
upper="$current/u"
work="$current/w"
snapmnt="$current/m"

tmpdir=/tmp/snapshot.$$
tmpmnt="$tmpdir/$id/m"
trap "_cleanup" 0 1 2 3 15
_cleanup()
{
	err=$?
	# Cleanup snapshot $id temp mounts
	umount -i "$tmpmnt" 2>/dev/null
	umount -i "$tmpdir" 2>/dev/null
	umount -i "$snapdir" 2>/dev/null
	rmdir $tmpdir 2>/dev/null
	exit $err
}

mount_old_snapshots()
{
	local old_snapshots=$snapmnt

	# mount snapshots from newest to oldest
	tac "$snapshots" | while read old; do
		[ "$old" != "$id" ] || continue
		oldsnap="@/$old"
		oldmnt="$oldsnap/m"
		[ -d "$oldsnap" ] || continue
		old_snapshots="$oldsnap/u:$old_snapshots"
		[ -d "$oldmnt" ] || continue
		mount -i -t overlay "$dev@$old" "$oldmnt" \
			-o"ro,lowerdir=$old_snapshots,$oldsnapmntopts"
	done
}

# Verify current snapshot dirs
[ -d "$snapmnt" -a -d "$upper" -a -d "$work" ] || \
	error "missing snapshot '$current' directories."

# Verify whiteout of snapshots dir inside upper
[ -c "$upper/@" ] || \
	error "missing whiteout of snapshot '$current' directories."

# Make shared mount clone of the real lower mount
mount --bind "$snapdir" "$snapdir" || exit 1
mount --make-shared "$snapdir" || exit 1
mkdir -p "$tmpdir" || exit 1
mount --bind "$snapdir" "$tmpdir" || exit 1

# Mount the current snapshot overlay and snapshot mount
mount -i -t overlay "$dev@$id" "$snapmnt" \
	-o"lowerdir=$lower,upperdir=$upper,workdir=$work,$snapmntopts" || exit 1
mount -i -t snapshot "$dev@$id" "$mnt" \
	-o"upperdir=$lower,snapshot=$snapmnt,$mntopts" || exit 1

# Bind the (now covered) current snapshot overlay above the snapshot mount
mount --bind -r "$tmpmnt" "$mnt/$snapmnt" || exit 1

# Mount older snapshots
mount_old_snapshots
