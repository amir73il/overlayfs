#!/bin/sh
# mount.snapshot <dev> <mnt>
# mount.snapshot <dev> <mnt>/@/_ -o remount
#
# Overlayfs snapshot mount helper
#
# - Check if snapshots stack exists at <mnt>/@/.snapshots
# - Mount (or remount) snapshot mount at <mnt>/@/_
# - Mount snapshot overlays at <mnt>/@/<id>/_
#
# * If any mount flags other than -o rw[,remount] are passed to helper,
#   it passes the command as is without doing the above
#
#-----------------------------------------------------------------------
#
# Copyright (C) 2016 CTERA Networks. All Rights Reserved.
# Author: Amir Goldstein <amir73il@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

dev="${1%@*}"
shift
mnt="${1%/}"
shift

[ -d "$mnt" ] || exit 1

error()
{
	echo "$1" >&2
	exit 1
}

mount_internal()
{
	echo "$dev $mnt -o $mntopts" > /tmp/mount.snapshot.in
	exec mount -i -t snapshot "$dev" "$mnt" -o "$mntopts"
}

freeze_thaw()
{
	[ "$REMOUNT" = true ] || return 0
	fsfreeze -f "$mntdir" || exit 1
	fsfreeze -u "$mntdir" || exit 1
}

# Verify that overlayfs snapshot feature is enabled
grep -wq 'overlay' /proc/filesystems || modprobe overlay
grep -wq 'snapshot' /proc/filesystems || \
	error "overlayfs snapshots feature not enabled."

# Verify that we are being called as mount helper
if [ -n "$1" -a "$1" != "-o" ]; then
       error "invalid snapshot mount options '$*'"
fi

shift
mntopts="$1"
shift

REMOUNT=false
if ( echo "$mntopts" | grep -q remount ) ; then
	REMOUNT=true
fi

if $REMOUNT; then
	# Remount - parse <mnt> from <mnt>/_
	mntdir="$mnt"
	mnt="${mntdir%/@/_}"
	[ "$mnt" != "$mntdir" ] || mount_internal
	# helper does not parse mount options beyond rw,remount
	# for mounting the current snapshot after snapshot take
	mntopts="rw,remount"
	# snapshot overlays do not support remount -
	# they have to be umounted/mounted
	umount -i "$mnt"/@/*/_ 2>/dev/null
else
	mntdir="$mnt/@/_"
	# helper does not parse mount options beyond rw
	[ -z "$mntopts" -o "$mntopts" = "rw" ] || mount_internal
	# Verify snapshot is not already mounted on <mnt>/_
	mount -t snapshot | while read d on m opt; do
		[ "$m" != "$mntdir" -a "$m" != "$mnt" ] || \
			error "overlayfs snapshot already mounted at '$m'."
	done

	mkdir -p "$mntdir" || \
		error "failed mkdir '"$mntdir"' for overlayfs snapshot."
fi

# Disable redirect_dir because of rename issue with multiple snapshots:
# https://github.com/amir73il/overlayfs/issues/1
#mntopts="$mntopts,redirect_dir=off"

# Avoid copy up on read access
mntopts="$mntopts,noatime"
snapmntopts="noatime,nfs_export=on,redirect_dir=origin"
oldsnapmntopts="noatime"

lower="$mnt"
snapdir="$mnt/@"
snapshots="$snapdir/.snapshots"
[ ! -s "$snapshots" ] || id=$(tail -n 1 "$snapshots")

if [ -z "$id" ]; then
	# No current snapshot - mount nosnapshot and exit
	mount -i -t snapshot "$dev@" "$mntdir" \
		-o"upperdir=$lower,nosnapshot,$mntopts" || exit 1
	# freeze/thaw to deactivate old snapshot
	freeze_thaw
	exit 0
fi

cd "$lower" || exit 1

# Relative to $lower to keep overlay mount options shorter
current="@/$id"
upper="$current/u"
work="$current/w"
snapmnt="$current/_"

trap "_cleanup" 0 1 2 3 15
_cleanup()
{
	err=$?
	# Cleanup snapshot overlay mounts if snapshot mount failed
	[ $err = 0 ] || umount -i "$snapdir"/*/_ 2>/dev/null
	exit $err
}

mount_old_snapshots()
{
	local old_snapshots=$snapmnt
	local prev=""

	# mount snapshots from newest to oldest
	tac "$snapshots" | while read old; do
		[ "$old" != "$id" ] || continue
		oldsnap="@/$old"
		oldmnt="$oldsnap/_"
		[ -d "$oldsnap" ] || continue
		[ -d "$oldmnt" ] || continue
		[ -n "$prev" ] || \
			mount -i -t overlay "$dev@$old" "$oldmnt" \
			-o"ro,upperdir=$oldsnap/u,workdir=$oldsnap/w,lowerdir=$old_snapshots,$snapmntopts"
		old_snapshots="$oldsnap/u:$old_snapshots"
		[ -z "$prev" ] || \
			mount -i -t overlay "$dev@$old" "$oldmnt" \
			-o"ro,lowerdir=$old_snapshots,$oldsnapmntopts"
		prev=$old
	done
}

# Verify current snapshot dirs
[ -d "$snapmnt" -a -d "$upper" -a -d "$work" ] || \
	error "missing snapshot '$current' directories."

# Verify whiteout of snapshots dir inside upper
[ -c "$upper/@" ] || \
	error "missing whiteout of snapshot '$current' directories."

# Mount the current snapshot overlay
mount -i -t overlay "$dev@$id" "$snapmnt" \
	-o"lowerdir=$lower,upperdir=$upper,workdir=$work,$snapmntopts" || exit 1

# Mount the snapshot mount
mount -i -t snapshot "$dev@" "$mntdir" \
	-o"upperdir=$lower,snapshot=$snapmnt,$mntopts" || exit 1

# Remount current snapshot overlay read-only
mount -o remount,ro "$snapmnt" || exit 1

# freeze/thaw to activate new snapshot
freeze_thaw

# Mount older snapshot overlays
mount_old_snapshots
